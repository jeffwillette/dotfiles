# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="eastwood"
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    conda-env
    fzf
    vi-mode
    history
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

export PATH=$HOME/bin:/usr/local/sbin:$PATH

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='vim'
fi

# these used to be in the format of \[\e[30m\] but using printf printed the brackets.
# I am not sure why that was the format, but worth noting
black='\e[30m'
red='\e[31m'
green='\e[32m'
yellow='\e[33m'
blue='\e[34m'
magenta='\e[35m'
cyan='\e[36m'
lgray='\e[37m'
dgray='\e[90m'
lred='\e[91m'
lgreen='\e[92m'
lyellow='\e[93m'
lblue='\e[94m'
lmagenta='\e[95m'
lcyan='\e[96m'
white='\e[97m'
reset='\e[0m' # reset to default color

# note with args of $1 = text and $2 = color variable will printf that line with colo
function note() {
    printf "$2$1${reset}"
}

function trash () {
    note "moving ${@} to trash\n" ${lcyan}
    now="$(date +%Y%m%d_%H%M%S)"
    mkdir -p ~/.trash/$now
    mv "$@" ~/.trash/$now
}

function emptytrash() {
    note "emptying trash\n" ${lcyan}
    rm -rf ~/.trash
    mkdir ~/.trash
}

export FD_SAVE_LINK=~/bin/fd.tar.gz
export DENO_SAVE_LINK=~/bin/deno.zip
export RG_SAVE_LINK=~/bin/rg.tar.gz

function download_clangd() {
    note "\ndownloading clangd\n" ${lcyan}

    download_dir=~/bin/clangd_18.1.3
    rm -r $download_dir
    rm ~/bin/clangd

    curl -Lo ${download_dir}.zip https://github.com/clangd/clangd/releases/download/18.1.3/clangd-linux-18.1.3.zip
    unzip ${download_dir}.zip
    rm ${download_dir}.zip
    ln -s clangd_18.1.3/bin/clangd ~/bin/clangd
}

function download_nvim() {
    note "\ndownloading nvim appimage\n" ${lcyan}
    # curl -Lo $NVIM_SAVE_LINK https://github.com/neovim/neovim/releases/download/v0.10.0/nvim.appimage
    curl -Lo $NVIM_SAVE_LINK https://github.com/neovim/neovim/releases/download/v0.10.1/nvim.appimage
    # curl -Lo $NVIM_SAVE_LINK https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
    chmod u+x $NVIM_SAVE_LINK
}

function download_fd() {
    note "\ndownloading fd\n" ${lcyan}
    # url=https://github.com/sharkdp/fd/releases/download/v9.0.0/fd-v9.0.0-x86_64-unknown-linux-gnu.tar.gz
    # file=fd-v9.0.0-x86_64-unknown-linux-gnu
    url=https://github.com/sharkdp/fd/releases/download/v10.2.0/fd-v10.2.0-x86_64-unknown-linux-gnu.tar.gz
    file=fd-v10.2.0-x86_64-unknown-linux-gnu

    curl -Lo $FD_SAVE_LINK ${url}

    cd ~/bin
    tar -xvf fd.tar.gz
    mv ~/bin/${file}/fd ~/bin/fd
    rm -r ${file}
    rm fd.tar.gz
}

function install_node() {
    # Download and install nvm:
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
    # in lieu of restarting the shell
    \. "$HOME/.nvm/nvm.sh"
    # Download and install Node.js:
    nvm install 22
    # Verify the Node.js version:
    node -v # Should print "v22.14.0".
    nvm current # Should print "v22.14.0".
    # Verify npm version:
    npm -v # Should print "10.9.2".
}

function download_deno() {
    # deno is a runtime for vim plugins, needs the exectuable to use advanced vim features.
    note "\ndownloading deno exectuable\n" ${lcyan}
    # curl -Lo $DENO_SAVE_LINK https://github.com/denoland/deno/releases/download/v1.45.0/deno-x86_64-unknown-linux-gnu.zip
    curl -Lo $DENO_SAVE_LINK https://github.com/denoland/deno/releases/download/v1.46.1/deno-x86_64-unknown-linux-gnu.zip 

    cd ~/bin
    unzip -o deno.zip
}

function download_rg {
    note "\ndownloading and extracting ripgrep\n" ${lcyan}
    # curl -Lo $RG_SAVE_LINK https://github.com/BurntSushi/ripgrep/releases/download/14.0.3/ripgrep-14.0.3-x86_64-unknown-linux-musl.tar.gz
    curl -Lo $RG_SAVE_LINK https://github.com/BurntSushi/ripgrep/releases/download/14.1.0/ripgrep-14.1.0-x86_64-unknown-linux-musl.tar.gz
    cd ~/bin
    tar -xvf rg.tar.gz
    cp ~/bin/ripgrep-14.0.3-x86_64-unknown-linux-musl/rg ~/bin
    rm -r ripgrep-14.0.3-x86_64-unknown-linux-musl
}

# rename file extensions in directory from 1 to 2
function renameExt() {
    for file in *."${1}"
    do
        mv "$file" "${file%.${1}}.${2}"
    done
}

# example of how to sed over multiple files
# grep -rl LIABILITYACCOUNTNAME ./* | xargs gsed -i 's/LIABILITYACCOUNTNAME/LIABILITYACCOUNT/g'
function replace() {
    grep \
        -rl \
        --exclude-dir coverage \
        --exclude-dir node_modules \
        --exclude-dir .cache \
        --exclude-dir vendor \
        --exclude-dir public \
        --exclude yarn.lock \
        "${1}" "${3}" | xargs gsed -i "s|${1}|${2}|g"
}


# Function to get the number of staged, modified, and untracked files
git_file_counts() {
  # Check if we are in a Git repository
  if git rev-parse --is-inside-work-tree &>/dev/null; then
    # Get staged files count (files staged for commit)
    local staged_count=$(git diff --name-only --cached | wc -l)

    # Get modified files count (unstaged changes)
    local modified_count=$(git ls-files -m | wc -l)

    # Get untracked files count
    local untracked_count=$(git ls-files --others --exclude-standard | wc -l)

    # Return file counts in the format: staged, modified, untracked
    echo "$staged_count $modified_count $untracked_count"
  else
    # If not in a Git repo, return empty values for the counts
    echo "- - -"
  fi
}

host=$(hostname)

# RPROMPT with Git status and Conda info
RPROMPT='%F{cyan}❮%F{white}%n@${host}%F{cyan}❯ %F{cyan}❮%F{white}%B$(conda_prompt_info)%b%F{cyan}❯%f'
RPROMPT+=' $(git_file_counts | awk "{print \"%F{cyan}❮%F{green}\" \$1 \"|%F{yellow}\" \$2 \"|%F{#8B0000}\" \$3 \"%F{cyan}❯%F{white}\"}")'
